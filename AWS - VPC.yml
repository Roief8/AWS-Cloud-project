AWSTemplateFormatVersion: 2010-09-09

Description: "Create VPC, 4 Subnets: 2 public and 2 private, neteork ACL, security groups (- Allow all, - HTTP ans SSH), 2 route tables, inetrnet gateway and S3 endpoint"

Parameters:
  VpcCIDR:
    Type: String
    Default: "10.0.0.0/16"
    Description: "CIDR block for the VPC"

  PublicSubnet01Name:
    Type: String
    Default: "Public01"
    Description: "Enter name for the Public subnet"
    AllowedPattern: "^[A-Za-z0-9-]+$"
    ConstraintDescription: "Only uppercase, lowercase letters and numbers are allowed."

  PublicSubnet02Name:
    Type: String
    Default: "Public02"
    Description: "Enter name for the Public subnet"
    AllowedPattern: "^[A-Za-z0-9-]+$"
    ConstraintDescription: "Only uppercase, lowercase letters and numbers are allowed."

  PrivateSubnet01Name:
    Type: String
    Default: "Private01"
    Description: "Enter name for the Public subnet"
    AllowedPattern: "^[A-Za-z0-9-]+$"
    ConstraintDescription: "Only uppercase, lowercase letters and numbers are allowed."

  PrivateSubnet02Name:
    Type: String
    Default: "Private02"
    Description: "Enter name for the Public subnet"
    AllowedPattern: "^[A-Za-z0-9-]+$"
    ConstraintDescription: "Only uppercase, lowercase letters and numbers are allowed."

Resources:
  ## ---- VPC ---- ##

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "VPC - ${VpcCIDR}"

  ## ---- Subnets ---- ##

  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [1, !Cidr [!GetAtt VPC.CidrBlock, 5, 8]]
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            !Join [
              " - ",
              [
                !Ref PublicSubnet01Name,
                !Select [0, !GetAZs ""],
                !Select [1, !Cidr [!GetAtt VPC.CidrBlock, 5, 8]],
              ],
            ]

  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [2, !Cidr [!GetAtt VPC.CidrBlock, 5, 8]]
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            !Join [
              " - ",
              [
                !Ref PublicSubnet02Name,
                !Select [1, !GetAZs ""],
                !Select [2, !Cidr [!GetAtt VPC.CidrBlock, 5, 8]],
              ],
            ]

  PrivateSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [3, !Cidr [!GetAtt VPC.CidrBlock, 5, 8]]
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value:
            !Join [
              " - ",
              [
                !Ref PrivateSubnet01Name,
                !Select [0, !GetAZs ""],
                !Select [3, !Cidr [!GetAtt VPC.CidrBlock, 5, 8]],
              ],
            ]

  PrivateSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [4, !Cidr [!GetAtt VPC.CidrBlock, 5, 8]]
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value:
            !Join [
              " - ",
              [
                !Ref PrivateSubnet02Name,
                !Select [1, !GetAZs ""],
                !Select [4, !Cidr [!GetAtt VPC.CidrBlock, 5, 8]],
              ],
            ]

  ## ---- Routing ---- ##

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} VPC - Public - RT"

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} VPC - Private - RT"

  ## ---- Routing Association ---- ##

  PublicSubnet01RtAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet01
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet02RtAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet02
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet01RtAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet01
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet02RtAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet02
      RouteTableId: !Ref PrivateRouteTable

  IgwRoute: # Route to IGW
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  ## ---- Internet Gateway ---- ##

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: IGW

  AttachIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  ## ---- Security Groups ---- ##

  AllowAllSG: # Allow all traffic
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow all inbound and outbound traffic"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"

  HttpSshSG: # Allow HTTP and SSH
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and SSH access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  ## ---- Network ACL ---- ##

  NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} - NACL"

  # Inbound and Outbound ACL Rules

  NAclInbound:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0

  NAclOutbound:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0

  # ACL Association

  PublicSubnet01NaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet01
      NetworkAclId: !Ref NetworkAcl

  PublicSubnet02NaclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet02
      NetworkAclId: !Ref NetworkAcl

  ## ---- Endpoints ---- ##

  S3VpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      RouteTableIds:
        - !Ref PrivateRouteTable
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "s3:*"
            Resource: "*"

Outputs:
  VpcOutput:
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}"

  PublicSubnetsOutput:
    Value:
      !Join [
        ",",
        [
          !Ref PublicSubnet01,
          !Ref PublicSubnet02,
          !Ref PrivateSubnet01,
          !Ref PrivateSubnet02,
        ],
      ]
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnets"

  AllowAllSGOutput:
    Value: !Ref AllowAllSG
    Export:
      Name: !Sub "${AWS::StackName}-Allow-All-SG"

  HttpSshSGOutput:
    Value: !Ref HttpSshSG
    Export:
      Name: !Sub "${AWS::StackName}-HTTP-SSH-SG"
